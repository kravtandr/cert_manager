"""
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ (–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ –ø–æ—Ç–æ–∫–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π

"""

import gc
import os
import random
import threading
import time
import uuid
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Generator, List

from faker import Faker
from tqdm import tqdm

from ..database import StreamingCertificateDatabase
from ..utils import MemoryMonitor, SystemOptimizer, logger


class CertificateGenerator:
    """–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""

    def __init__(
        self,
        num_clients: int = 1000,
        num_certificates: int = 2000,
        batch_size: int = None,
        num_workers: int = None,
    ):
        self.num_clients = num_clients
        self.num_certificates = num_certificates

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã
        if batch_size is None or num_workers is None:
            logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:")
            optimal_settings = SystemOptimizer.get_optimal_settings(
                num_clients, num_certificates
            )
            self.batch_size = batch_size or optimal_settings["batch_size"]
            self.num_workers = num_workers or optimal_settings["num_workers"]
        else:
            logger.info("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
            self.batch_size = batch_size
            self.num_workers = num_workers

        logger.info(
            f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {num_clients:,} –∫–ª–∏–µ–Ω—Ç–æ–≤, "
            f"{num_certificates:,} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
        )
        logger.info(
            f"–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {self.batch_size:,}, –†–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤: {self.num_workers}"
        )

        # Thread-safe –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã Faker –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
        self._faker_instances: Dict[int, Faker] = {}
        self._lock = threading.Lock()

    def _get_faker(self) -> Faker:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ thread-safe —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ Faker"""
        thread_id = threading.get_ident()
        if thread_id not in self._faker_instances:
            with self._lock:
                if thread_id not in self._faker_instances:
                    self._faker_instances[thread_id] = Faker("ru_RU")
        return self._faker_instances[thread_id]

    def generate_clients_batch(self, start_id: int, count: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞—Ç—á–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        clients = []
        for i in range(start_id, start_id + count):
            client = {"client_id": i}
            clients.append(client)
        return clients

    def generate_certificates_batch(self, start_id: int, count: int) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞—Ç—á–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        certificates = []

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã—Ö ID
        for i in range(count):
            certificate_index = start_id - 1 + i  # start_id –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 1
            cert_id = self.generate_consistent_certificate_id(certificate_index)
            certificate = {"certificate_id": cert_id}
            certificates.append(certificate)
        return certificates

    def generate_assignments_batch(
        self, client_ids: List[int], certificate_pool: List[str]
    ) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –±–∞—Ç—á–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        assignments = []

        for client_id in client_ids:
            # –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –æ—Ç 0 –¥–æ 20 —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            num_certs = random.randint(0, 20)

            # –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ª—é–±—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –∏–∑ –ø—É–ª–∞ (–æ–¥–∏–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤)
            client_certificates = random.sample(
                certificate_pool, min(num_certs, len(certificate_pool))
            )

            for certificate_id in client_certificates:
                # –ü–µ—Ä–∏–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è –æ—Ç 3 –º–µ—Å—è—Ü–µ–≤ –¥–æ 20 –ª–µ—Ç (–≤ –¥–Ω—è—Ö)
                validity_days = random.randint(90, 7300)

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
                # –æ—Ç 365 –¥–Ω–µ–π –≤ –ø—Ä–æ—à–ª–æ–º –∏ –¥–æ 7300 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥, –ø–µ—Ä–µ–≤–µ—Å –≤ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
                expiry_date = datetime.now().date() + timedelta(
                    days=random.randint(-365, validity_days)
                )

                assignment = {
                    "client_id": client_id,
                    "certificate_id": certificate_id,
                    "expiry_date": expiry_date,
                }

                assignments.append(assignment)

        return assignments

    def generate_clients_parallel(self) -> Generator[List[Dict], None, None]:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–∞—Ç—á–∞–º–∏"""
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.num_clients:,} –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")

        with ThreadPoolExecutor(max_workers=self.num_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–µ–π
            futures = []
            for start_id in range(1, self.num_clients + 1, self.batch_size):
                count = min(self.batch_size, self.num_clients - start_id + 1)
                future = executor.submit(self.generate_clients_batch, start_id, count)
                futures.append(future)

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            with tqdm(total=len(futures), desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤") as pbar:
                for future in as_completed(futures):
                    batch = future.result()
                    yield batch
                    pbar.update(1)

                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                    if pbar.n % 10 == 0:
                        gc.collect()

    def generate_certificates_parallel(self) -> Generator[List[Dict], None, None]:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –±–∞—Ç—á–∞–º–∏"""
        logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è {self.num_certificates:,} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ...")

        with ThreadPoolExecutor(max_workers=self.num_workers) as executor:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –±–∞—Ç—á–µ–π
            futures = []
            remaining = self.num_certificates
            start_id = 1

            while remaining > 0:
                count = min(self.batch_size, remaining)
                future = executor.submit(
                    self.generate_certificates_batch, start_id, count
                )
                futures.append(future)
                start_id += count
                remaining -= count

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            with tqdm(total=len(futures), desc="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤") as pbar:
                for future in as_completed(futures):
                    batch = future.result()
                    yield batch
                    pbar.update(1)

                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
                    if pbar.n % 10 == 0:
                        gc.collect()

    def generate_consistent_certificate_id(self, index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–≥–æ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ, –Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ–≥–æ ID
        random.seed(42 + index)  # Seed –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–µ–∫—Å–∞
        cert_id = str(uuid.uuid4())
        return cert_id

    def get_certificate_pool(self, connection=None) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–ª–∞ ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"""
        logger.info("–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–ª–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

        if connection is None:
            # –ï—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–æ, —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ
            import sqlite3

            connection = sqlite3.connect("data/certificates.db")
            should_close = True
        else:
            should_close = False

        try:
            cursor = connection.cursor()
            cursor.execute("SELECT certificate_id FROM certificates")
            rows = cursor.fetchall()
            certificate_ids = [row[0] for row in rows]

            logger.info(
                f"–ü–æ–ª—É—á–µ–Ω–æ {len(certificate_ids):,} ID —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
            )
            return certificate_ids

        finally:
            if should_close:
                connection.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
    logger.info("=== –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ ===")
    MemoryMonitor.log_memory_usage("—Å—Ç–∞—Ä—Ç")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        num_clients = int(os.getenv("NUM_CLIENTS", "1000"))
        num_certificates = int(os.getenv("NUM_CERTIFICATES", "2000"))

        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        manual_batch_size = os.getenv("BATCH_SIZE")
        manual_num_workers = os.getenv("NUM_WORKERS")
        manual_buffer_size = os.getenv("BUFFER_SIZE")

        batch_size = int(manual_batch_size) if manual_batch_size else None
        num_workers = int(manual_num_workers) if manual_num_workers else None
        buffer_size = int(manual_buffer_size) if manual_buffer_size else None

        logger.info(
            f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {num_clients:,} –∫–ª–∏–µ–Ω—Ç–æ–≤, {num_certificates:,} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"
        )

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        generator = CertificateGenerator(
            num_clients=num_clients,
            num_certificates=num_certificates,
            batch_size=batch_size,  # None = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            num_workers=num_workers,  # None = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
        )

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
        db = StreamingCertificateDatabase(
            write_buffer_size=buffer_size,  # None = –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            num_clients=num_clients,
            num_certificates=num_certificates,
        )
        db.connect()
        db.create_tables()
        MemoryMonitor.log_memory_usage("–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è")

        # 3. –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤
        logger.info("=== –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ ===")
        start_time = time.time()

        for batch in generator.generate_clients_parallel():
            db.insert_clients_batch(batch)

        elapsed = time.time() - start_time
        logger.info(f"–ö–ª–∏–µ–Ω—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ {elapsed:.2f} —Å–µ–∫")
        MemoryMonitor.log_memory_usage("–∫–ª–∏–µ–Ω—Ç—ã")

        # 4. –ü–æ—Ç–æ–∫–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –∑–∞–ø–∏—Å—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        logger.info("=== –ü–æ—Ç–æ–∫–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ ===")
        start_time = time.time()

        for batch in generator.generate_certificates_parallel():
            db.insert_certificates_batch(batch)

        elapsed = time.time() - start_time
        logger.info(f"–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞ {elapsed:.2f} —Å–µ–∫")
        MemoryMonitor.log_memory_usage("—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")

        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º
        logger.info("=== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π ===")
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –±—É—Ñ–µ—Ä—ã
        db._flush_clients()
        db._flush_certificates()
        certificate_pool = generator.get_certificate_pool(db.connection)

        # –ë–∞—Ç—á–µ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π
        assignment_batch_size = generator.batch_size
        for start_id in tqdm(
            range(1, num_clients + 1, assignment_batch_size), desc="–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è"
        ):
            end_id = min(start_id + assignment_batch_size, num_clients + 1)
            client_ids = list(range(start_id, end_id))

            assignments = generator.generate_assignments_batch(
                client_ids, certificate_pool
            )
            db.insert_assignments_batch(assignments)

            # –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∂–¥—ã–µ 10 –±–∞—Ç—á–µ–π
            if (start_id // assignment_batch_size) % 10 == 0:
                gc.collect()

        MemoryMonitor.log_memory_usage("–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")

        # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±—É—Ñ–µ—Ä–æ–≤
        db.flush_all()

        # 7. –ü–æ—Ç–æ–∫–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
        logger.info("=== –ü–æ—Ç–æ–∫–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ ===")
        output_dir = os.getenv("OUTPUT_DIR", "output")
        Path(output_dir).mkdir(exist_ok=True)

        active_certs_file = f"{output_dir}/active_certificates.csv"
        total_active = 0

        with open(active_certs_file, "w", encoding="utf-8") as f:
            f.write("client_id,certificate_id,expiry_date,days_until_expiry\n")

            for chunk_df in db.get_active_certificates_streaming():
                chunk_df.to_csv(f, header=False, index=False)
                total_active += len(chunk_df)

                if total_active % 100000 == 0:
                    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {total_active:,} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")

        logger.info(f"–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {total_active:,}")
        logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {active_certs_file}")

        # 8. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        MemoryMonitor.log_memory_usage("–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")

        db.close()
        logger.info("=== –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ===")

    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise


if __name__ == "__main__":
    main()
