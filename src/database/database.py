import os
import sqlite3
import threading
from datetime import datetime
from typing import Dict, Iterator, List

import pandas as pd

from ..utils import SystemOptimizer, logger


class StreamingCertificateDatabase:
    """–ü–æ—Ç–æ–∫–æ–≤–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""

    def __init__(
        self,
        db_path: str = None,
        write_buffer_size: int = None,
        num_clients: int = 1000,
        num_certificates: int = 2000,
    ):
        if db_path is None:
            db_path = os.getenv("DB_PATH", "certificates.db")

        db_dir = os.path.dirname(db_path)
        if db_dir:
            os.makedirs(db_dir, exist_ok=True)

        self.db_path = db_path

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –µ—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã
        if write_buffer_size is None:
            logger.info("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã:")
            optimal_settings = SystemOptimizer.get_optimal_settings(
                num_clients, num_certificates
            )
            self.write_buffer_size = optimal_settings["write_buffer_size"]
            self.chunk_size = optimal_settings["chunk_size"]
        else:
            logger.info("–ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è:")
            self.write_buffer_size = write_buffer_size
            self.chunk_size = 50000  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        self.connection = None
        self._write_lock = threading.Lock()

        # –ë—É—Ñ–µ—Ä—ã –¥–ª—è –±–∞—Ç—á–µ–≤–æ–π –∑–∞–ø–∏—Å–∏
        self._client_buffer: List[Dict] = []
        self._certificate_buffer: List[Dict] = []
        self._assignment_buffer: List[Dict] = []

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            self.connection = sqlite3.connect(
                self.db_path, check_same_thread=False, timeout=30.0
            )
            self.connection.row_factory = sqlite3.Row

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è SQLite –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö
            cursor = self.connection.cursor()
            cursor.execute("PRAGMA journal_mode = WAL")  # Write-Ahead Logging
            cursor.execute("PRAGMA synchronous = NORMAL")  # –ë–∞–ª–∞–Ω—Å —Å–∫–æ—Ä–æ—Å—Ç–∏/–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            cursor.execute("PRAGMA cache_size = -64000")  # 64MB –∫—ç—à
            cursor.execute("PRAGMA temp_store = MEMORY")  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–º—è—Ç–∏
            cursor.execute("PRAGMA mmap_size = 268435456")  # 256MB memory-mapped I/O

            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î {self.db_path} —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
            raise

    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏"""
        try:
            cursor = self.connection.cursor()

            # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–º–∏—Ç –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
            cursor.execute("BEGIN TRANSACTION")

            # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS clients (
                    client_id INTEGER PRIMARY KEY
                ) WITHOUT ROWID
            """
            )

            # –¢–∞–±–ª–∏—Ü–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS certificates (
                    certificate_id TEXT PRIMARY KEY
                ) WITHOUT ROWID
            """
            )

            # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
            cursor.execute(
                """
                CREATE TABLE IF NOT EXISTS client_certificates (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    client_id INTEGER NOT NULL,
                    certificate_id TEXT NOT NULL,
                    expiry_date DATE NOT NULL,
                    FOREIGN KEY (client_id) REFERENCES clients (client_id),
                    FOREIGN KEY (certificate_id) REFERENCES certificates (certificate_id)
                )
            """
            )

            # –°–æ—Å—Ç–∞–≤–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
            cursor.execute(
                """
                CREATE INDEX IF NOT EXISTS idx_client_cert_expiry_composite
                ON client_certificates(client_id, expiry_date, certificate_id)
            """
            )
            cursor.execute(
                """
                CREATE INDEX IF NOT EXISTS idx_expiry_date
                ON client_certificates(expiry_date)
            """
            )

            cursor.execute("COMMIT")
            logger.info("–¢–∞–±–ª–∏—Ü—ã –∏ –∏–Ω–¥–µ–∫—Å—ã —Å–æ–∑–¥–∞–Ω—ã")

        except Exception as e:
            cursor.execute("ROLLBACK")
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü: {e}")
            raise

    def insert_clients_batch(self, clients: List[Dict]):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        self._client_buffer.extend(clients)

        if len(self._client_buffer) >= self.write_buffer_size:
            self._flush_clients()

    def insert_certificates_batch(self, certificates: List[Dict]):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        self._certificate_buffer.extend(certificates)

        if len(self._certificate_buffer) >= self.write_buffer_size:
            self._flush_certificates()

    def insert_assignments_batch(self, assignments: List[Dict]):
        """–ü–æ—Ç–æ–∫–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π"""
        self._assignment_buffer.extend(assignments)

        if len(self._assignment_buffer) >= self.write_buffer_size:
            self._flush_assignments()

    def _flush_clients(self):
        """–°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –ë–î"""
        if not self._client_buffer:
            return

        with self._write_lock:
            try:
                cursor = self.connection.cursor()
                cursor.execute("BEGIN TRANSACTION")

                cursor.executemany(
                    """
                    INSERT OR REPLACE INTO clients (client_id) VALUES (?)
                """,
                    [(client["client_id"],) for client in self._client_buffer],
                )

                cursor.execute("COMMIT")
                logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ {len(self._client_buffer):,} –∫–ª–∏–µ–Ω—Ç–æ–≤")
                self._client_buffer.clear()

            except Exception as e:
                cursor.execute("ROLLBACK")
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
                raise

    def _flush_certificates(self):
        """–°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –≤ –ë–î"""
        if not self._certificate_buffer:
            return

        with self._write_lock:
            try:
                cursor = self.connection.cursor()
                cursor.execute("BEGIN TRANSACTION")

                cursor.executemany(
                    """
                    INSERT OR REPLACE INTO certificates (certificate_id) VALUES (?)
                """,
                    [(cert["certificate_id"],) for cert in self._certificate_buffer],
                )

                cursor.execute("COMMIT")
                logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ {len(self._certificate_buffer):,} —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
                self._certificate_buffer.clear()

            except Exception as e:
                cursor.execute("ROLLBACK")
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
                raise

    def _flush_assignments(self):
        """–°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π –≤ –ë–î"""
        if not self._assignment_buffer:
            return

        with self._write_lock:
            try:
                cursor = self.connection.cursor()
                cursor.execute("BEGIN TRANSACTION")

                cursor.executemany(
                    """
                    INSERT INTO client_certificates
                    (client_id, certificate_id, expiry_date) VALUES (?, ?, ?)
                """,
                    [
                        (a["client_id"], a["certificate_id"], a["expiry_date"])
                        for a in self._assignment_buffer
                    ],
                )

                cursor.execute("COMMIT")
                logger.info(f"–ó–∞–ø–∏—Å–∞–Ω–æ {len(self._assignment_buffer):,} –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π")
                self._assignment_buffer.clear()

            except Exception as e:
                cursor.execute("ROLLBACK")
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–π: {e}")
                raise

    def flush_all(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤"""
        logger.info("–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤...")
        self._flush_clients()
        self._flush_certificates()
        self._flush_assignments()
        logger.info("–í—Å–µ –±—É—Ñ–µ—Ä—ã —Å–±—Ä–æ—à–µ–Ω—ã")

    def get_active_certificates_streaming(
        self, chunk_size: int = None
    ) -> Iterator[pd.DataFrame]:
        """–ü–æ—Ç–æ–∫–æ–≤–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
        if chunk_size is None:
            chunk_size = self.chunk_size

        try:
            current_date = datetime.now().date()
            query = """
                SELECT
                    c.client_id,
                    cert.certificate_id,
                    cc.expiry_date,
                    ROUND((julianday(cc.expiry_date) - julianday(date('now'))), 0) as days_until_expiry
                FROM clients c
                JOIN client_certificates cc ON c.client_id = cc.client_id
                JOIN certificates cert ON cc.certificate_id = cert.certificate_id
                WHERE cc.expiry_date > ?
                ORDER BY c.client_id, cc.expiry_date
                LIMIT ? OFFSET ?
            """

            offset = 0
            while True:
                df = pd.read_sql_query(
                    query, self.connection, params=[current_date, chunk_size, offset]
                )

                if df.empty:
                    break

                yield df
                offset += chunk_size

                if len(df) < chunk_size:  # –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
                    break

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ—Ç–æ–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            raise

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å–±—Ä–æ—Å–æ–º –±—É—Ñ–µ—Ä–æ–≤"""
        self.flush_all()
        if self.connection:
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞
            cursor = self.connection.cursor()
            cursor.execute("PRAGMA optimize")  # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
            try:
                cursor.execute("VACUUM")  # –û—á–∏—Å—Ç–∫–∞ –∏ –¥–µ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è
            except sqlite3.OperationalError:
                # VACUUM –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                pass

            self.connection.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π")
